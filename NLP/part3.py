from gensim.models import Word2Vec
from sklearn.manifold import TSNE
import matplotlib.pyplot as plt
import re

# üìå 1. –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ—Ä–ø—É—Å—É
corpus = [
    "–ö–æ—Ä–æ–ª—å –∂–∏–≤–µ –≤ –ø–∞–ª–∞—Ü—ñ.",
    "–ö–æ—Ä–æ–ª–µ–≤–∞ —î –π–æ–≥–æ –¥—Ä—É–∂–∏–Ω–æ—é.",
    "–ß–æ–ª–æ–≤—ñ–∫ —ñ –∂—ñ–Ω–∫–∞ ‚Äì –¥–≤—ñ —Å—Ç–∞—Ç—ñ.",
    "–ö—ñ—à–∫–∞ –ª–æ–≤–∏—Ç—å –º–∏—à—É.",
    "–°–æ–±–∞–∫–∞ –æ—Ö–æ—Ä–æ–Ω—è—î –¥—ñ–º.",
    "–õ–µ–≤ —î —Ü–∞—Ä–µ–º –∑–≤—ñ—Ä—ñ–≤.",
    "–¢–∏–≥—Ä —Ç–∞–∫–æ–∂ —Å–∏–ª—å–Ω–∏–π —Ö–∏–∂–∞–∫.",
]


# –û—á–∏—Å—Ç–∫–∞ —ñ —Ç–æ–∫–µ–Ω—ñ–∑–∞—Ü—ñ—è
def preprocess(text):
    text = re.sub(
        r"[^\w\s]", "", text.lower()
    )  # –Ω–∏–∂–Ω—ñ–π —Ä–µ–≥—ñ—Å—Ç—Ä, –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ä–æ–∑–¥—ñ–ª–æ–≤–∏—Ö –∑–Ω–∞–∫—ñ–≤
    return text.split()


tokenized_corpus = [preprocess(sentence) for sentence in corpus]

# üìå 2. –ü–æ–±—É–¥–æ–≤–∞ –º–æ–¥–µ–ª—ñ Word2Vec
model = Word2Vec(
    sentences=tokenized_corpus, vector_size=100, window=3, min_count=1, workers=4
)
model.save("model_w2v.model")

# üìå 3. –ê–Ω–∞–ª—ñ–∑
print("\nüîç –°—Ö–æ–∂—ñ –¥–æ '–∂—ñ–Ω–∫–∞':")
print(model.wv.most_similar("–∂—ñ–Ω–∫–∞", topn=5))

print("\nüßÆ –°–µ–º–∞–Ω—Ç–∏—á–Ω–∞ –∞—Ä–∏—Ñ–º–µ—Ç–∏–∫–∞ (–∫–æ—Ä–æ–ª—å - —á–æ–ª–æ–≤—ñ–∫ + –∂—ñ–Ω–∫–∞):")
result = model.wv.most_similar(
    positive=["–∫–æ—Ä–æ–ª—å", "–∂—ñ–Ω–∫–∞"], negative=["—á–æ–ª–æ–≤—ñ–∫"], topn=3
)
print(result)


# üìå 4. –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è —Å—Ö–æ–∂–∏—Ö —Å–ª—ñ–≤ (TSNE)
def visualize(model, target_word, topn=10):
    words = [target_word]
    embeddings = [model.wv[target_word]]

    for word, _ in model.wv.most_similar(target_word, topn=topn):
        words.append(word)
        embeddings.append(model.wv[word])

    tsne = TSNE(n_components=2, random_state=0, perplexity=5)
    reduced = tsne.fit_transform(embeddings)

    plt.figure(figsize=(8, 6))
    for i, word in enumerate(words):
        x, y = reduced[i]
        plt.scatter(x, y)
        plt.text(x + 0.01, y + 0.01, word, fontsize=12)
    plt.title(f"–°—Ö–æ–∂—ñ —Å–ª–æ–≤–∞ –¥–æ '{target_word}' (TSNE)")
    plt.grid(True)
    plt.show()


visualize(model, "–∂—ñ–Ω–∫–∞")
